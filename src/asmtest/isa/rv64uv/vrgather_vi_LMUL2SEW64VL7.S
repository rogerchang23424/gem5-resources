
# See LICENSE for license details.

# This file is automatically generated. Do not edit.

#*****************************************************************************
# isa/rv64uv/vrgather_vi_LMUL2SEW64VL7.S
#-----------------------------------------------------------------------------
#
# Test vrgather.vi instructions.
# With LMUL=2, SEW=64, VL=7
#

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

RVTEST_CODE_BEGIN

  la a1, tdat
  la a3, sres
  ld a4, 0(a1)
  li a5, 1
  li a4, 0
  li a6, 8
  bgtu a5, a6, .ASL1
  li a4, 8
  mul a5, a5, a4
  add a4, a1, a5
  ld a4, 0(a4)
.ASL1:
  mv a5, a4
  sd a5, 0(a3)
  ld a4, 8(a1)
  li a5, 1
  li a4, 0
  li a6, 8
  bgtu a5, a6, .ASL2
  li a4, 8
  mul a5, a5, a4
  add a4, a1, a5
  ld a4, 0(a4)
.ASL2:
  mv a5, a4
  sd a5, 8(a3)
  ld a4, 16(a1)
  li a5, 1
  li a4, 0
  li a6, 8
  bgtu a5, a6, .ASL3
  li a4, 8
  mul a5, a5, a4
  add a4, a1, a5
  ld a4, 0(a4)
.ASL3:
  mv a5, a4
  sd a5, 16(a3)
  ld a4, 24(a1)
  li a5, 1
  li a4, 0
  li a6, 8
  bgtu a5, a6, .ASL4
  li a4, 8
  mul a5, a5, a4
  add a4, a1, a5
  ld a4, 0(a4)
.ASL4:
  mv a5, a4
  sd a5, 24(a3)
  ld a4, 32(a1)
  li a5, 1
  li a4, 0
  li a6, 8
  bgtu a5, a6, .ASL5
  li a4, 8
  mul a5, a5, a4
  add a4, a1, a5
  ld a4, 0(a4)
.ASL5:
  mv a5, a4
  sd a5, 32(a3)
  ld a4, 40(a1)
  li a5, 1
  li a4, 0
  li a6, 8
  bgtu a5, a6, .ASL6
  li a4, 8
  mul a5, a5, a4
  add a4, a1, a5
  ld a4, 0(a4)
.ASL6:
  mv a5, a4
  sd a5, 40(a3)
  ld a4, 48(a1)
  li a5, 1
  li a4, 0
  li a6, 8
  bgtu a5, a6, .ASL7
  li a4, 8
  mul a5, a5, a4
  add a4, a1, a5
  ld a4, 0(a4)
.ASL7:
  mv a5, a4
  sd a5, 48(a3)


  li t0, -1
  vsetvli t1, t0, e64,m2,ta,ma
  la a2, tdat
  vle64.v v4, (a2)
  vle64.v v2, (a2)

  
  li t0, 7
  vsetvli t1, t0, e64,m2,ta,ma
  vrgather.vi v2, v4, 1

  li t0, -1
  vsetvli t1, t0, e64,m2,ta,ma
  la a1, res
  vse64.v v2, (a1)
  la a2, sres

  TEST_CASE_REG(3, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(4, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(5, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(6, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(7, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(8, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(9, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)

  li t0, -1
  vsetvli t1, t0, e64,m2,ta,ma
  la a2, tdat
  vle64.v v4, (a2)
  vle64.v v2, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 7
  vsetvli t1, t0, e64,m2,ta,ma
  vrgather.vi v2, v4, 1, v0.t

  li t0, -1
  vsetvli t1, t0, e64,m2,ta,ma
  la a1, res
  vse64.v v2, (a1)
  la a2, sres

  TEST_CASE_REG(10, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(11, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(12, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(13, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(14, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(15, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(16, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(17, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(18, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(19, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(20, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(21, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(22, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(23, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(24, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(25, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(26, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(27, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(28, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(29, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(30, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(31, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(32, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(33, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(34, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(35, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(36, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(37, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(38, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(39, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(40, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(41, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)

  li t0, -1
  vsetvli t1, t0, e64,m2,ta,ma
  la a2, tdat
  vle64.v v4, (a2)
  vle64.v v2, (a2)

  
  li t0, 7
  vsetvli t1, t0, e64,m2,tu,ma
  vrgather.vi v2, v4, 1

  li t0, -1
  vsetvli t1, t0, e64,m2,ta,ma
  la a1, res
  vse64.v v2, (a1)
  la a2, sres

  TEST_CASE_REG(42, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(43, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(44, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(45, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(46, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(47, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(48, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)

  li t0, -1
  vsetvli t1, t0, e64,m2,ta,ma
  la a2, tdat
  vle64.v v4, (a2)
  vle64.v v2, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 7
  vsetvli t1, t0, e64,m2,ta,ma
  vrgather.vi v2, v4, 1, v0.t

  li t0, -1
  vsetvli t1, t0, e64,m2,ta,ma
  la a1, res
  vse64.v v2, (a1)
  la a2, sres

  TEST_CASE_REG(49, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(50, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(51, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(52, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(53, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(54, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(55, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(56, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(57, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(58, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(59, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(60, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(61, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(62, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(63, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(64, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(65, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(66, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(67, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(68, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(69, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(70, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(71, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(72, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(73, t0, 0x1, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(74, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(75, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(76, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(77, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(78, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(79, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(80, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(81, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(82, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(83, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(84, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(85, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(86, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(87, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(88, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(89, t0, 0x7, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(90, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(91, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(92, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(93, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(94, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(95, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(96, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(97, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(98, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(99, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(100, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(101, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(102, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(103, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(104, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)

  TEST_PASSFAIL

RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

res:
  .zero 72

sres:
  .zero 72

tdat:
  .quad 0x0
  .quad 0x0
  .quad 0x1
  .quad 0x1
  .quad 0x3
  .quad 0x7
  .quad 0xfffffffffffffff8
  .quad 0x0
  .quad 0xffffffffffffffff

mask:
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555

RVTEST_DATA_END


# See LICENSE for license details.

# This file is automatically generated. Do not edit.

#*****************************************************************************
# isa/rv64uv/vsub_vv_LMUL1SEW64VL3.S
#-----------------------------------------------------------------------------
#
# Test vsub.vv instructions.
# With LMUL=1, SEW=64, VL=3
#

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

RVTEST_CODE_BEGIN

  la a1, tdat
  la a3, sres
  la a2, tdat+8
  ld a4, 0(a1)
  ld a5, 0(a2)
  sub a5, a4, a5
  sd a5, 0(a3)
  ld a4, 8(a1)
  ld a5, 8(a2)
  sub a5, a4, a5
  sd a5, 8(a3)
  ld a4, 16(a1)
  ld a5, 16(a2)
  sub a5, a4, a5
  sd a5, 16(a3)


  li t0, -1
  vsetvli t1, t0, e64,m1,ta,ma
  la a2, tdat
  vle64.v v2, (a2)
  vle64.v v1, (a2)
  la a2, tdat+8
  vle64.v v3, (a2)

  
  li t0, 3
  vsetvli t1, t0, e64,m1,ta,ma
  vsub.vv v1, v2, v3

  li t0, -1
  vsetvli t1, t0, e64,m1,ta,ma
  la a1, res
  vse64.v v1, (a1)
  la a2, sres

  TEST_CASE_REG(3, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(4, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(5, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)

  li t0, -1
  vsetvli t1, t0, e64,m1,ta,ma
  la a2, tdat
  vle64.v v2, (a2)
  vle64.v v1, (a2)
  la a2, tdat+8
  vle64.v v3, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 3
  vsetvli t1, t0, e64,m1,ta,ma
  vsub.vv v1, v2, v3, v0.t

  li t0, -1
  vsetvli t1, t0, e64,m1,ta,ma
  la a1, res
  vse64.v v1, (a1)
  la a2, sres

  TEST_CASE_REG(6, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(7, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(8, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(9, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(10, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(11, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(12, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(13, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(14, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(15, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(16, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(17, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(18, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(19, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(20, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(21, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)

  li t0, -1
  vsetvli t1, t0, e64,m1,ta,ma
  la a2, tdat
  vle64.v v2, (a2)
  vle64.v v1, (a2)
  la a2, tdat+8
  vle64.v v3, (a2)

  
  li t0, 3
  vsetvli t1, t0, e64,m1,tu,ma
  vsub.vv v1, v2, v3

  li t0, -1
  vsetvli t1, t0, e64,m1,ta,ma
  la a1, res
  vse64.v v1, (a1)
  la a2, sres

  TEST_CASE_REG(22, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(23, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(24, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)

  li t0, -1
  vsetvli t1, t0, e64,m1,ta,ma
  la a2, tdat
  vle64.v v2, (a2)
  vle64.v v1, (a2)
  la a2, tdat+8
  vle64.v v3, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 3
  vsetvli t1, t0, e64,m1,ta,ma
  vsub.vv v1, v2, v3, v0.t

  li t0, -1
  vsetvli t1, t0, e64,m1,ta,ma
  la a1, res
  vse64.v v1, (a1)
  la a2, sres

  TEST_CASE_REG(25, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(26, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(27, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(28, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(29, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(30, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(31, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(32, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(33, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(34, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(35, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(36, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(37, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(38, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(39, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(40, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(41, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(42, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(43, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(44, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(45, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(46, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(47, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(48, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)

  TEST_PASSFAIL

RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

res:
  .zero 40

sres:
  .zero 40

tdat:
  .quad 0x0
  .quad 0x0
  .quad 0x1
  .quad 0x1
  .quad 0x3

mask:
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555

RVTEST_DATA_END

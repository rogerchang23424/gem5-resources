
# See LICENSE for license details.

# This file is automatically generated. Do not edit.

#*****************************************************************************
# isa/rv64uv/vsaddu_vv_LMUL2SEW32VL15.S
#-----------------------------------------------------------------------------
#
# Test vsaddu.vv instructions.
# With LMUL=2, SEW=32, VL=15
#

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

RVTEST_CODE_BEGIN

  la a1, tdat
  la a3, sres
  la a2, tdat+8
  lwu a4, 0(a1)
  lwu a5, 0(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL1
  li a5, -1
.ASL1:
  sw a5, 0(a3)
  lwu a4, 4(a1)
  lwu a5, 4(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL2
  li a5, -1
.ASL2:
  sw a5, 4(a3)
  lwu a4, 8(a1)
  lwu a5, 8(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL3
  li a5, -1
.ASL3:
  sw a5, 8(a3)
  lwu a4, 12(a1)
  lwu a5, 12(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL4
  li a5, -1
.ASL4:
  sw a5, 12(a3)
  lwu a4, 16(a1)
  lwu a5, 16(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL5
  li a5, -1
.ASL5:
  sw a5, 16(a3)
  lwu a4, 20(a1)
  lwu a5, 20(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL6
  li a5, -1
.ASL6:
  sw a5, 20(a3)
  lwu a4, 24(a1)
  lwu a5, 24(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL7
  li a5, -1
.ASL7:
  sw a5, 24(a3)
  lwu a4, 28(a1)
  lwu a5, 28(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL8
  li a5, -1
.ASL8:
  sw a5, 28(a3)
  lwu a4, 32(a1)
  lwu a5, 32(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL9
  li a5, -1
.ASL9:
  sw a5, 32(a3)
  lwu a4, 36(a1)
  lwu a5, 36(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL10
  li a5, -1
.ASL10:
  sw a5, 36(a3)
  lwu a4, 40(a1)
  lwu a5, 40(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL11
  li a5, -1
.ASL11:
  sw a5, 40(a3)
  lwu a4, 44(a1)
  lwu a5, 44(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL12
  li a5, -1
.ASL12:
  sw a5, 44(a3)
  lwu a4, 48(a1)
  lwu a5, 48(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL13
  li a5, -1
.ASL13:
  sw a5, 48(a3)
  lwu a4, 52(a1)
  lwu a5, 52(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL14
  li a5, -1
.ASL14:
  sw a5, 52(a3)
  lwu a4, 56(a1)
  lwu a5, 56(a2)
  add a5, a4, a5
  slli a5, a5, 32
  srli a5, a5, 32
  bgeu a5, a4, .ASL15
  li a5, -1
.ASL15:
  sw a5, 56(a3)


  li t0, -1
  vsetvli t1, t0, e32,m2,ta,ma
  la a2, tdat
  vle32.v v4, (a2)
  vle32.v v2, (a2)
  la a2, tdat+8
  vle32.v v6, (a2)

  
  li t0, 15
  vsetvli t1, t0, e32,m2,ta,ma
  vsaddu.vv v2, v4, v6

  li t0, -1
  vsetvli t1, t0, e32,m2,ta,ma
  la a1, res
  vse32.v v2, (a1)
  la a2, sres

  TEST_CASE_REG(3, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(4, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(5, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(6, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(7, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(8, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(9, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)

  li t0, -1
  vsetvli t1, t0, e32,m2,ta,ma
  la a2, tdat
  vle32.v v4, (a2)
  vle32.v v2, (a2)
  la a2, tdat+8
  vle32.v v6, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 15
  vsetvli t1, t0, e32,m2,ta,ma
  vsaddu.vv v2, v4, v6, v0.t

  li t0, -1
  vsetvli t1, t0, e32,m2,ta,ma
  la a1, res
  vse32.v v2, (a1)
  la a2, sres

  TEST_CASE_REG(10, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(11, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(12, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(13, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(14, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(15, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(16, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(17, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(18, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(19, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(20, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(21, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(22, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(23, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(24, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(25, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(26, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(27, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(28, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(29, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(30, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(31, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(32, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(33, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(34, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(35, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(36, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(37, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(38, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(39, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(40, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(41, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)

  li t0, -1
  vsetvli t1, t0, e32,m2,ta,ma
  la a2, tdat
  vle32.v v4, (a2)
  vle32.v v2, (a2)
  la a2, tdat+8
  vle32.v v6, (a2)

  
  li t0, 15
  vsetvli t1, t0, e32,m2,tu,ma
  vsaddu.vv v2, v4, v6

  li t0, -1
  vsetvli t1, t0, e32,m2,ta,ma
  la a1, res
  vse32.v v2, (a1)
  la a2, sres

  TEST_CASE_REG(42, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(43, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(44, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(45, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(46, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(47, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(48, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)

  li t0, -1
  vsetvli t1, t0, e32,m2,ta,ma
  la a2, tdat
  vle32.v v4, (a2)
  vle32.v v2, (a2)
  la a2, tdat+8
  vle32.v v6, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 15
  vsetvli t1, t0, e32,m2,ta,ma
  vsaddu.vv v2, v4, v6, v0.t

  li t0, -1
  vsetvli t1, t0, e32,m2,ta,ma
  la a1, res
  vse32.v v2, (a1)
  la a2, sres

  TEST_CASE_REG(49, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(50, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(51, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(52, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(53, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(54, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(55, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(56, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(57, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(58, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(59, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(60, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(61, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(62, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(63, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(64, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(65, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(66, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(67, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(68, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(69, t0, 0x3, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(70, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(71, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(72, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(73, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(74, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(75, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(76, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(77, t0, 0x7, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(78, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(79, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(80, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(81, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(82, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(83, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(84, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(85, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(86, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(87, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(88, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(89, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(90, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(91, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(92, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(93, t0, 0x1, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(94, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(95, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(96, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(97, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(98, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(99, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(100, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(101, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(102, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(103, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(104, t0, 0xef, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(105, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(106, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(107, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(108, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)

  TEST_PASSFAIL

RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

res:
  .zero 72

sres:
  .zero 72

tdat:
  .quad 0x1
  .quad 0x1
  .quad 0x3fffffff8
  .quad 0x700000000
  .quad 0xffffffffefffffff
  .quad 0x100000000
  .quad 0xefffffffffffffff
  .quad 0x100000000
  .quad 0x1

mask:
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555

RVTEST_DATA_END

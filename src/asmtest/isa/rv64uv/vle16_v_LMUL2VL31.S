
# See LICENSE for license details.

# This file is automatically generated. Do not edit.

#*****************************************************************************
# isa/rv64uv/vle16_v_LMUL2VL31.S
#-----------------------------------------------------------------------------
#
# Test vle16.v instructions.
# With LMUL=2, VL=31
#

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

RVTEST_CODE_BEGIN


  li t0, -1
  vsetvli t1, t0, e16,m2,ta,ma
  la a2, tdat
  mv s1, a2
  addi a2, a2, 8
  vle16.v v2, (a2)

  
  li t0, 31
  vsetvli t1, t0, e16,m2,ta,ma
  vle16.v v2, (s1)

  li t0, -1
  vsetvli t1, t0, e16,m2,ta,ma
  la a1, res
  vse16.v v2, (a1)
  TEST_CASE(3, t0, 0xbf80000040000000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(4, t0, 0x40400000c0800000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(5, t0, 0xdeadbeefcafebabe, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(6, t0, 0xabad1dea1337d00d, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(7, t0, 0xbf80000040000000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(8, t0, 0x40400000c0800000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(9, t0, 0xdeadbeefcafebabe, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(10, t0, 0xd, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(11, t0, 0xd0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(12, t0, 0x37, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(13, t0, 0x13, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(14, t0, 0xea, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(15, t0, 0x1d, lbu t0, 0(a1); addi a1, a1, 1)


  li t0, -1
  vsetvli t1, t0, e16,m2,ta,ma
  la a2, tdat
  mv s1, a2
  addi a2, a2, 8
  vle16.v v2, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 31
  vsetvli t1, t0, e16,m2,ta,ma
  vle16.v v2, (s1), v0.t

  li t0, -1
  vsetvli t1, t0, e16,m2,ta,ma
  la a1, res
  vse16.v v2, (a1)
  TEST_CASE(16, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(17, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(18, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(19, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(20, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(21, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(22, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(23, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(24, t0, 0xbe, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(25, t0, 0xba, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(26, t0, 0xef, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(27, t0, 0xbe, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(28, t0, 0xd, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(29, t0, 0xd0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(30, t0, 0xea, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(31, t0, 0x1d, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(32, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(33, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(34, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(35, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(36, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(37, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(38, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(39, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(40, t0, 0xbe, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(41, t0, 0xba, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(42, t0, 0xef, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(43, t0, 0xbe, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(44, t0, 0xd, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(45, t0, 0xd0, lbu t0, 0(a1); addi a1, a1, 1)
  addi a1, a1, 1
  addi a1, a1, 1
  TEST_CASE(46, t0, 0xea, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(47, t0, 0x1d, lbu t0, 0(a1); addi a1, a1, 1)


  li t0, -1
  vsetvli t1, t0, e16,m2,ta,ma
  la a2, tdat
  mv s1, a2
  addi a2, a2, 8
  vle16.v v2, (a2)

  
  li t0, 31
  vsetvli t1, t0, e16,m2,tu,ma
  vle16.v v2, (s1)

  li t0, -1
  vsetvli t1, t0, e16,m2,ta,ma
  la a1, res
  vse16.v v2, (a1)
  TEST_CASE(48, t0, 0xbf80000040000000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(49, t0, 0x40400000c0800000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(50, t0, 0xdeadbeefcafebabe, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(51, t0, 0xabad1dea1337d00d, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(52, t0, 0xbf80000040000000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(53, t0, 0x40400000c0800000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(54, t0, 0xdeadbeefcafebabe, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(55, t0, 0xbf801dea1337d00d, ld t0, 0(a1); addi a1, a1, 8)


  li t0, -1
  vsetvli t1, t0, e16,m2,ta,ma
  la a2, tdat
  mv s1, a2
  addi a2, a2, 8
  vle16.v v2, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 31
  vsetvli t1, t0, e16,m2,ta,mu
  vle16.v v2, (s1), v0.t

  li t0, -1
  vsetvli t1, t0, e16,m2,ta,ma
  la a1, res
  vse16.v v2, (a1)
  TEST_CASE(56, t0, 0x40400000c0800000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(57, t0, 0xdead0000cafe0000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(58, t0, 0xabadbeef1337babe, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(59, t0, 0xbf801dea4000d00d, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(60, t0, 0x40400000c0800000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(61, t0, 0xdead0000cafe0000, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(62, t0, 0xabadbeef1337babe, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(63, t0, 0xd, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(64, t0, 0xd0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(65, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(66, t0, 0x40, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(67, t0, 0xea, lbu t0, 0(a1); addi a1, a1, 1)
  TEST_CASE(68, t0, 0x1d, lbu t0, 0(a1); addi a1, a1, 1)

  TEST_PASSFAIL

RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

res:
  .zero 72

tdat:
  .quad 0xbf80000040000000
  .quad 0x40400000c0800000
  .quad 0xdeadbeefcafebabe
  .quad 0xabad1dea1337d00d
  .quad 0xbf80000040000000
  .quad 0x40400000c0800000
  .quad 0xdeadbeefcafebabe
  .quad 0xabad1dea1337d00d
  .quad 0xbf80000040000000

mask:
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555

RVTEST_DATA_END

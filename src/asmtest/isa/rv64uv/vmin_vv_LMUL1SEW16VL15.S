
# See LICENSE for license details.

# This file is automatically generated. Do not edit.

#*****************************************************************************
# isa/rv64uv/vmin_vv_LMUL1SEW16VL15.S
#-----------------------------------------------------------------------------
#
# Test vmin.vv instructions.
# With LMUL=1, SEW=16, VL=15
#

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

RVTEST_CODE_BEGIN

  la a1, tdat
  la a3, sres
  la a2, tdat+8
  lhu a4, 0(a1)
  lhu a5, 0(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL1
  mv a5, a4
.ASL1:
  sh a5, 0(a3)
  lhu a4, 2(a1)
  lhu a5, 2(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL2
  mv a5, a4
.ASL2:
  sh a5, 2(a3)
  lhu a4, 4(a1)
  lhu a5, 4(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL3
  mv a5, a4
.ASL3:
  sh a5, 4(a3)
  lhu a4, 6(a1)
  lhu a5, 6(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL4
  mv a5, a4
.ASL4:
  sh a5, 6(a3)
  lhu a4, 8(a1)
  lhu a5, 8(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL5
  mv a5, a4
.ASL5:
  sh a5, 8(a3)
  lhu a4, 10(a1)
  lhu a5, 10(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL6
  mv a5, a4
.ASL6:
  sh a5, 10(a3)
  lhu a4, 12(a1)
  lhu a5, 12(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL7
  mv a5, a4
.ASL7:
  sh a5, 12(a3)
  lhu a4, 14(a1)
  lhu a5, 14(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL8
  mv a5, a4
.ASL8:
  sh a5, 14(a3)
  lhu a4, 16(a1)
  lhu a5, 16(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL9
  mv a5, a4
.ASL9:
  sh a5, 16(a3)
  lhu a4, 18(a1)
  lhu a5, 18(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL10
  mv a5, a4
.ASL10:
  sh a5, 18(a3)
  lhu a4, 20(a1)
  lhu a5, 20(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL11
  mv a5, a4
.ASL11:
  sh a5, 20(a3)
  lhu a4, 22(a1)
  lhu a5, 22(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL12
  mv a5, a4
.ASL12:
  sh a5, 22(a3)
  lhu a4, 24(a1)
  lhu a5, 24(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL13
  mv a5, a4
.ASL13:
  sh a5, 24(a3)
  lhu a4, 26(a1)
  lhu a5, 26(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL14
  mv a5, a4
.ASL14:
  sh a5, 26(a3)
  lhu a4, 28(a1)
  lhu a5, 28(a2)
  slli a4, a4, 48
  srai a4, a4, 48
  slli a5, a5, 48
  srai a5, a5, 48
  blt a5, a4, .ASL15
  mv a5, a4
.ASL15:
  sh a5, 28(a3)


  li t0, -1
  vsetvli t1, t0, e16,m1,ta,ma
  la a2, tdat
  vle16.v v2, (a2)
  vle16.v v1, (a2)
  la a2, tdat+8
  vle16.v v3, (a2)

  
  li t0, 15
  vsetvli t1, t0, e16,m1,ta,ma
  vmin.vv v1, v2, v3

  li t0, -1
  vsetvli t1, t0, e16,m1,ta,ma
  la a1, res
  vse16.v v1, (a1)
  la a2, sres

  TEST_CASE_REG(3, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(4, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(5, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)

  li t0, -1
  vsetvli t1, t0, e16,m1,ta,ma
  la a2, tdat
  vle16.v v2, (a2)
  vle16.v v1, (a2)
  la a2, tdat+8
  vle16.v v3, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 15
  vsetvli t1, t0, e16,m1,ta,ma
  vmin.vv v1, v2, v3, v0.t

  li t0, -1
  vsetvli t1, t0, e16,m1,ta,ma
  la a1, res
  vse16.v v1, (a1)
  la a2, sres

  TEST_CASE_REG(6, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(7, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(8, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(9, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(10, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(11, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(12, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(13, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(14, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(15, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(16, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(17, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(18, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(19, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  addi a1, a1, 1; addi a2, a2, 1;
  addi a1, a1, 1; addi a2, a2, 1;
  TEST_CASE_REG(20, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(21, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)

  li t0, -1
  vsetvli t1, t0, e16,m1,ta,ma
  la a2, tdat
  vle16.v v2, (a2)
  vle16.v v1, (a2)
  la a2, tdat+8
  vle16.v v3, (a2)

  
  li t0, 15
  vsetvli t1, t0, e16,m1,tu,ma
  vmin.vv v1, v2, v3

  li t0, -1
  vsetvli t1, t0, e16,m1,ta,ma
  la a1, res
  vse16.v v1, (a1)
  la a2, sres

  TEST_CASE_REG(22, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(23, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)
  TEST_CASE_REG(24, t0, t1, ld t0, 0(a1); ld t1, 0(a2); addi a1, a1, 8; addi a2, a2, 8)

  li t0, -1
  vsetvli t1, t0, e16,m1,ta,ma
  la a2, tdat
  vle16.v v2, (a2)
  vle16.v v1, (a2)
  la a2, tdat+8
  vle16.v v3, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 15
  vsetvli t1, t0, e16,m1,ta,ma
  vmin.vv v1, v2, v3, v0.t

  li t0, -1
  vsetvli t1, t0, e16,m1,ta,ma
  la a1, res
  vse16.v v1, (a1)
  la a2, sres

  TEST_CASE_REG(25, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(26, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(27, t0, 0x3, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(28, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(29, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(30, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(31, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(32, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(33, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(34, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(35, t0, 0x7, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(36, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(37, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(38, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(39, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(40, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(41, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(42, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(43, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(44, t0, 0xef, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(45, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(46, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(47, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(48, t0, 0xff, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(49, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(50, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(51, t0, 0x1, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE(52, t0, 0x0, lbu t0, 0(a1); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(53, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)
  TEST_CASE_REG(54, t0, t1, lbu t0, 0(a1); lbu t1, 0(a2); addi a1, a1, 1; addi a2, a2, 1)

  TEST_PASSFAIL

RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

res:
  .zero 40

sres:
  .zero 40

tdat:
  .quad 0x10003fff8
  .quad 0x100070000
  .quad 0xffffefffefffffff
  .quad 0x1000000010000
  .quad 0x10003fff8

mask:
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555

RVTEST_DATA_END
